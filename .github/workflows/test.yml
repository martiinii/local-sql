name: Test remote cache

on: push

permissions:
  contents: write
  packages: write

jobs:
  determine_tag:
    runs-on: ubuntu-latest
    outputs:
      npm_tag: ${{ steps.determine_npm_tag.outputs.npm_tag }}
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: extract_version
        run: |
          VERSION="${GITHUB_REF#refs/tags/v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Determine npm tag
        id: determine_npm_tag
        shell: bash
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          if [[ "$TAG" =~ -(next|canary|beta|rc) ]]; then
            # Extract pre-release tag (e.g., beta, rc)
            NPM_TAG=${BASH_REMATCH[1]}
          else
            # Check if the commit is on the main branch
            git fetch origin main
            if git merge-base --is-ancestor "$GITHUB_SHA" origin/main; then
              NPM_TAG="latest"
            else
              echo "The tagged commit is not on the main branch."
              echo "::error ::Releases with the 'latest' npm tag must be on the main branch."
              exit 1
            fi
          fi
          echo "npm_tag=$NPM_TAG" >> $GITHUB_OUTPUT
          echo "Using npm tag: $NPM_TAG"

  build:
    runs-on: ubuntu-latest
    needs: determine_tag
    env:
      TURBO_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }} 
    strategy:
      fail-fast: true
      matrix:
        package: ["api"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun.js
        uses: oven-sh/setup-bun@v2

      - name: Install dependencies
        run: bun i

      - name: Build ${{ matrix.package }}
        run: VERCEL_TARGET_ENV=${{ needs.determine_tag.outputs.npm_tag == 'latest' && 'production' || 'preview' }} bun run build:${{ matrix.package }}